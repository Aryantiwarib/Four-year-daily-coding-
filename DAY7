from itertools import permutations
class Solution:
    MOD = 10**9 + 7

    def factorial(self, n):
        fact = 1
        for i in range(1, n+1):
            fact = (fact * i) % self.MOD
        return fact

    def solve(self, A):
        total_cost = 0

        A_fact = self.factorial(A-1)
        
        for x in range(1, A+1):
            cost = (x * (x - 1)) // 2  
            total_cost = (total_cost + (A_fact * cost)) % self.MOD  
        return total_cost
        




# MAIN APPROACH OF THIS QUESTION 
# //////////////////////////////////////////////////////////////////////////////////////////////////////\

# Observe that if the first value of the permutation is x, all the numbers from
#  1 to x-1 will go to left subtree.

# So, the cost will be x*(x-1)/2.

# The number of permutations with x as the first element will be A-1! .

# So, the answer will be A-1! * (x*(x-1))/2 for all x from 1 to A.

# You can use for loops to calculate (x*(x-1))/2 for all x from 1 to A or simplify it further.

# ////////////////////////////////////////////////////////////////////////////////////////////////////

        
        # Observe that if the first value of the permutation is x, 
        # all the numbers from 1 to x-1 will go to left subtree.
        # sum of all left subtree binary search tree 
        # in the order in they appear 
        # agar next number small then at the left other wise right 





# Those answer with cross the time limit
# one solution 

# class Solution:
#     def solve(self, A):
#         mode=10**9 + 7
#         l=[i for i in range(1,A+1)]
#         m=list(permutations(l,len(l)))
#         a=0
#         for  j in range(len(m)):
#             for i in range(1,len(m[j])):
#                 if(m[j][i]<m[j][i-1]):
#                     a+=m[j][i]
#         return a 


# second solution 
# class Solution:
#     def solve(self, A):
#         mode=10**9 + 7
#         l=[i for i in range(1,A+1)]
#         m=list(permutations(l,len(l)))
#         a=0
#         for i in m:
#             a+=sum([j for j in range(1,(i[0]-1)+1)])
#         return a 



# THIRD SOLUTION 
# from itertools import permutations
# class Solution:
#     def solve(self, A):
#         mode=10**9 + 7
        
#         l = list(range(1, A + 1))
        
#         m=list(permutations(l,len(l)))
#         a=0
#         for i in m:
#             a+=sum(list(range(1,(i[0]-1)+1)))
#         return a 

# FOURTH QUESTION 
