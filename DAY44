class Solution {
    
   static int checkAscending(int[] arr,int target,int start,int end,boolean asc){
        while(start<=end){
            int mid=start+(end-start)/2;
            int midValue=arr[mid];
            if(midValue>target){
                if(asc){
                    end=mid-1;
                }else{
                    start=mid+1;
                }
            }

            else if(midValue<target){
                if(asc){
                    start=mid+1;
                }else{
                    end=mid-1;
                }
            }else{
                return mid;
            }
        }
        return -1;
    }
    static int pickArr(int[] arr){
        int start=0;
        int end=arr.length-1;
        while(start<end){
            int mid=start+(end-start)/2;
            if(arr[mid]>arr[mid+1]){
                end=mid;
            }
            else if(arr[0]>arr[mid]){
                end=mid-1;
            }
            else if(arr[0]<arr[mid]){
                start=mid+1;
            }
            else{
                start=mid+1;
            }
        }
        return start;
    }
    
    public int search(int[] arr, int target) {
        
        int first=checkAscending(arr,target,0,pickArr(arr),true);
        int last=checkAscending(arr,target,pickArr(arr)+1,arr.length-1,true);

        if(first!=-1){
            return first;
        }else if(first==-1 && last!=-1){
            return last;
        }else{
            return -1;
        }
    }
}


// the additional approach in this question is that i will check the mid with start 
// 1. if start>mid -->> its mean before mid all larger element present so i will set end=mid-1;
// 2. if mid > start -->> its mean after mid all larger element present so i will set start=mid+1;



